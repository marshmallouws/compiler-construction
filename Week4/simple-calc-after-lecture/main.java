import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;
import java.io.IOException;

public class main {
    public static void main(String[] args) throws IOException{

	// we expect exactly one argument: the name of the input file
	if (args.length!=1) {
	    System.err.println("\n");
	    System.err.println("Simple calculator\n");
	    System.err.println("=================\n\n");
	    System.err.println("Please give as input argument a filename\n");
	    System.exit(-1);
	}
	String filename=args[0];

	// open the input file
	CharStream input = CharStreams.fromFileName(filename);
	    //new ANTLRFileStream (filename); // depricated
	
	// create a lexer/scanner
	simpleCalcLexer lex = new simpleCalcLexer(input);
	
	// get the stream of tokens from the scanner
	CommonTokenStream tokens = new CommonTokenStream(lex);
	
	// create a parser
	simpleCalcParser parser = new simpleCalcParser(tokens);
	
	// and parse anything from the grammar for "start"
	ParseTree parseTree = parser.start();

	// Construct an interpreter and run it on the parse tree
	Interpreter interpreter = new Interpreter();
	Expr result=interpreter.visit(parseTree);
	System.out.println("The result is "+result.eval());
    }
}

// We write an interpreter that implements interface
// "simpleCalcVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply a Double.

/*
class Interpreter extends AbstractParseTreeVisitor<Double> implements simpleCalcVisitor<Double> {

    public Double visitStart(simpleCalcParser.StartContext ctx){
	return visit(ctx.e);
    };
    //public Double visitExpr(simpleCalcParser.ExprContext ctx){return null;};

    public Double visitParenthesis(simpleCalcParser.ParenthesisContext ctx){
	return visit(ctx.e);};
    public Double visitMultiplication(simpleCalcParser.MultiplicationContext ctx){
	return visit(ctx.e1)*visit(ctx.e2);};
    public Double visitAddition(simpleCalcParser.AdditionContext ctx){
	if (ctx.op.getText().equals("+"))
	    return visit(ctx.e1)+visit(ctx.e2);
	else
	    return visit(ctx.e1)-visit(ctx.e2);
    };
    public Double visitConstant(simpleCalcParser.ConstantContext ctx){
	String val=ctx.d.getText();
	return Double.valueOf(val);
    };

}*/

class Interpreter extends AbstractParseTreeVisitor<Expr> implements simpleCalcVisitor<Expr> {

    public Expr visitStart(simpleCalcParser.StartContext ctx){
	return visit(ctx.e);
    };
    //public Expr visitExpr(simpleCalcParser.ExprContext ctx){return null;};

    public Expr visitParenthesis(simpleCalcParser.ParenthesisContext ctx){
	return visit(ctx.e);};
    
    public Expr visitMultiplication(simpleCalcParser.MultiplicationContext ctx){
	return new Multiplication(visit(ctx.e1),visit(ctx.e2));};
    public Expr visitAddition(simpleCalcParser.AdditionContext ctx){
	if (ctx.op.getText().equals("+"))
	    return new Addition(visit(ctx.e1),visit(ctx.e2));
	else
	    return new Subtraction(visit(ctx.e1),visit(ctx.e2));
    };
    public Expr visitConstant(simpleCalcParser.ConstantContext ctx){
	String val=ctx.d.getText();
	return new Constant(Double.valueOf(val));
    };

}

/*
Expr e=
new Addition(new Constant(3.14),new Multiplication(new Constant(1),new Constant(2)))
*/

abstract class Expr{
    abstract public Double eval();
}

class Addition extends Expr{
    Expr e1,e2;
    Addition(Expr e1, Expr e2){ this.e1=e1; this.e2=e2;}
    public Double eval(){ return e1.eval()+e2.eval(); }
}

class Subtraction extends Expr{
    Expr e1,e2;
    Subtraction(Expr e1, Expr e2){ this.e1=e1; this.e2=e2;}
    public Double eval(){ return e1.eval()-e2.eval(); }
}

class Multiplication extends Expr{
    Expr e1,e2;
    Multiplication(Expr e1, Expr e2){ this.e1=e1; this.e2=e2;}
    public Double eval(){ return e1.eval()*e2.eval(); }
}

class Constant extends Expr{
    Double d;
    Constant(Double d){this.d=d;}
    public Double eval(){ return d; };
}
